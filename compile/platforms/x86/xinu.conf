/* Configuration - (device configuration specifications)  */
/* Unspecified switches default to ioerr                  */
/*  -i    init          -o    open      -c    close       */
/*  -r    read          -g    getc      -p    putc        */
/*  -w    write         -s    seek      -n    control     */
/*  -intr interrupt     -csr  csr       -irq  irq         */

/* "type" declarations for both real- and pseudo- devices */

/* simple loopback device */
loopback:
	on LOOPBACK -i loopbackInit -o loopbackOpen  -c loopbackClose
	            -r loopbackRead -g loopbackGetc  -p loopbackPutc
	            -w loopbackWrite -n loopbackControl

/* null device */
null:
    on NOTHING  -i ionull       -o ionull        -c ionull
                -r ionull       -g ionull        -p ionull
                -w ionull

/* physical uart (NS16550) device */
uart:
	on HARDWARE -i uartInit     -o ionull        -c ionull
	            -r uartRead     -g uartGetc      -p uartPutc
	            -w uartWrite    -n uartControl
	            -intr uartInterrupt

/* tty pseudo-devices */
tty:
	on SOFTWARE -i ttyInit      -o ttyOpen       -c ttyClose
	            -r ttyRead      -g ttyGetc       -p ttyPutc
	            -w ttyWrite     -n ttyControl

/* FLASH for each flash device */
flash:
    on HARDWARE -i flashInit    -o flashOpen     -c flashClose
                -r flashRead    -w flashWrite    -n flashControl

/* physical Ethernet device */
ether:
	on HARDWARE -i etherInit    -o etherOpen     -c etherClose
	            -r etherRead    -w etherWrite    -n etherControl
	            -intr etherInterrupt
	on SOFTWARE -i vlanInit     -o vlanOpen      -c vlanClose
	            -r etherRead    -w etherWrite    -n etherControl
	            -intr etherInterrupt

/* simple Ethernet loopback device */
ethloop:
	on ETHLOOP  -i ethloopInit  -o ethloopOpen   -c ethloopClose
	            -r ethloopRead  -w ethloopWrite  -n ethloopControl

/* raw sockets */
raw:
	on SOFTWARE -i rawInit      -o rawOpen       -c rawClose
                -r rawRead      -w rawWrite      -n rawControl

/* udp devices */
udp:
    on NET      -i udpInit      -o udpOpen       -c udpClose
                -r udpRead      -w udpWrite      -n udpControl

/* tcp devices */
tcp:
    on SOFTWARE -i tcpInit      -o tcpOpen       -c tcpClose
                -r tcpRead      -g tcpGetc       -w tcpWrite
                -p tcpPutc      -n tcpControl

/* http pseudo-devices */
http:
        on TCP      -i httpInit     -o httpOpen      -c httpClose
                    -r httpRead     -g httpGetc      -p httpPutc
                    -w httpWrite    -n httpControl

/* telnet devices */
telnet:
    on TCP      -i telnetInit   -o telnetOpen   -c telnetClose
                -r telnetRead   -g telnetGetc   -w telnetWrite
                -p telnetPutc   -n telnetControl

%%

/* One uart (that Mike Z knows of) on Intel */
/* Also, irq 1 is a guess.  Hope it's right! */
SERIAL0   is uart     on HARDWARE csr 0x3f8 irq 4

DEVNULL   is null     on NOTHING

/* TTYs for each uart */
CONSOLE   is tty      on SOFTWARE

/* Physical ethernet raw packet interface */
/* TODO:  Figure out this csr and irq!!! */
/* ETH0      is ether    on HARDWARE csr 0xB8001000 irq 4 */

%%

/* Configuration and Size Constants */
/* Mike Z took lots of guesses here. */

extern short inb(long);
extern short outb(long, long);

#define LITTLE_ENDIAN 0x1234
#define BIG_ENDIAN    0x4321

#define BYTE_ORDER    LITTLE_ENDIAN

#define NTHREAD   100           /* number of user threads           */
#define NSEM      100           /* number of semaphores             */
#define NMAILBOX  15            /* number of mailboxes              */
#define RTCLOCK   TRUE          /* now have RTC support             */
#define NETEMU    FALSE         /* Network Emulator support         */
#define NVRAM     FALSE          /* now have nvram support           */
#define SB_BUS    FALSE         /* Silicon Backplane support        */
#define PCI_BUS   FALSE         /* PCI Bus for x86 support        */
#define GPIO      TRUE          /* General-purpose I/O (leds)       */
#define IRQ_TIMER IRQ_HW5       /* timer IRQ is wired to hardware 5 */
#define IRQ_UART  IRQ_HW1
#define IRQ_ETH0  IRQ_HW2
#define IRQ_ETH1  IRQ_HW0
#define UART_FIFO_LEN   16      /* Size of hardware FIFO buffer on x86 */
//#define UHEAP_SIZE 8*1024*1024  /* size of memory for user threads  */
#define USE_TLB   FALSE         /* make use of TLB                  */
#define USE_TAR   TRUE          /* enable data archives             */
#define GPIO_BASE 0xB8000060    /* General-purpose I/O lines        */
